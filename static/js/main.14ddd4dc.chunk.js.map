{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","getData","a","getAllStarwarsPeople","starwarsPeople","setState","people","axios","then","response","data","results","count","numberOfPagesLeft","Math","ceil","promises","i","push","Promise","all","reduce","acc","catch","error","console","log","g","componentDidMount","showPeople","state","map","e","index","name","this","length","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oRAGqBA,E,kDAEnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAWRC,QAAU,WACR,sBAAC,4BAAAC,EAAA,sEAC8B,EAAKC,uBADnC,OACOC,EADP,OAEC,EAAKC,SAAS,CAAEC,OAAQF,IAFzB,0CAAD,IAbiB,EAmBnBD,qBAAuB,WACrB,IAAIG,EAAS,GAEb,OAAOC,IAAM,iCACVC,MAAK,SAAAC,GAGJ,OADAH,EAASG,EAASC,KAAKC,QAChBF,EAASC,KAAKE,SAEtBJ,MAAK,SAAAI,GAIJ,IAHA,IAAMC,EAAoBC,KAAKC,MAAMH,EAAQ,GAAK,IAC9CI,EAAW,GAENC,EAAI,EAAGA,GAAKJ,EAAmBI,IACtCD,EAASE,KAAKX,IAAM,qCAAD,OAAsCU,KAE3D,OAAOE,QAAQC,IAAIJ,MAEpBR,MAAK,SAAAC,GAGJ,OADAH,EAASG,EAASY,QAAO,SAACC,EAAKZ,GAAN,4BAAmBY,GAAnB,YAA2BZ,EAAKA,KAAKC,YAAUL,MAGzEiB,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAI,4BA1Cb,EA6CnBC,EAAI,aA7Ce,EA+CnBC,kBAAoB,WAClB,EAAK3B,WAhDY,EAmDnB4B,WAAa,WACX,OAAO,EAAKC,MAAMxB,OAAOyB,KAAI,SAACC,EAAGC,GAAJ,OAAe,8BAAkBD,EAAEE,MAAVD,OAlDtD,EAAKH,MAAQ,CACXxB,OAAQ,IAHO,E,qDAwDjB,OACE,gCACG6B,KAAKN,aACLM,KAAKL,MAAMxB,OAAO8B,c,GA7DMC,IAAMC,WCSxBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBjC,MAAK,YAAkD,IAA/CkC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.14ddd4dc.chunk.js","sourcesContent":["import React from 'react';\nimport axios from 'axios';\n\nexport default class App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      people: []\n    };\n  }\n\n  //shouldComponentUpdate = () => this.state.people.length === 0\n\n  /*\n  An async anonymous function that waits for all the queries before calling to setState.\n  */\n  getData = () => {\n    (async () => {\n      const starwarsPeople = await this.getAllStarwarsPeople();\n      this.setState({ people: starwarsPeople });\n    })();\n  }\n\n  getAllStarwarsPeople = () => {\n    let people = [];\n    // get the first page\n    return axios(\"https://swapi.dev/api/people/\")\n      .then(response => {\n        // get the people from the first page\n        people = response.data.results;\n        return response.data.count;\n      })\n      .then(count => {\n        const numberOfPagesLeft = Math.ceil((count - 1) / 10);\n        let promises = [];\n        // get promises for all the pages\n        for (let i = 2; i <= numberOfPagesLeft; i++) {\n          promises.push(axios(`https://swapi.dev/api/people?page=${i}`));\n        }\n        return Promise.all(promises);\n      })\n      .then(response => {\n        // get the people from pages 2 to n\n        people = response.reduce((acc, data) => [...acc, ...data.data.results], people);\n        return people;\n      })\n      .catch(error => console.log(\"SOMETHING WENT WRONG\"));\n  }\n\n  g = () => { }\n\n  componentDidMount = () => {\n    this.getData();\n  }\n\n  showPeople = () => {\n    return this.state.people.map((e, index) => (<div key={index}>{e.name}</div>))\n  }\n\n  render() {\n    return (\n      <div>\n        {this.showPeople()}\n        {this.state.people.length}\n      </div>\n    );\n  }\n\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}